Short answer: you can‚Äôt ‚Äúexport a Streamlit app‚Äù with all of its Python logic and server callbacks into a single email-able HTML that behaves identically‚ÄîStreamlit is server-based. But you can deliver a great, self-contained interactive HTML report (zoomable charts, sortable/filterable tables) that works offline in a browser. Here are the best options, from most practical to most ‚ÄúStreamlit-like‚Äù:


---

Option A ‚Äî Generate a self-contained HTML report (recommended)

Keep your Streamlit app for exploration, and add an ‚ÄúExport HTML‚Äù button that builds a standalone HTML file using:

Plotly for interactive charts (fig.write_html(..., include_plotlyjs='inline'))

DataTables (via a tiny JS snippet) for sortable, searchable, paginated tables

Optional: small client-side controls (dropdowns/check-boxes) with plain JS


Why this is best: totally offline, opens in any browser, easy to email, no server needed. Interactivity covers zoom/pan/hover on charts and table search/sort ‚Äì i.e., the bits clients usually need.

Drop-in exporter you can paste into your Streamlit app:

# utils/report_export.py
from __future__ import annotations
import plotly.io as pio
import pandas as pd
from pathlib import Path
from html import escape

CSS = """
body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;margin:2rem;}
h1{margin:0 0 1rem 0} h2{margin:2rem 0 0.75rem}
.card{background:#fff;border:1px solid #eee;border-radius:12px;padding:1rem;margin:1rem 0;box-shadow:0 1px 4px rgba(0,0,0,.04)}
footer{margin-top:3rem;color:#666;font-size:.9rem}
"""

# jQuery+DataTables from CDN (safe to leave as-is; replace with local copies if email filters block CDNs)
DT_HEAD = """
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.13.8/css/jquery.dataTables.min.css">
<script src="https://cdn.datatables.net/1.13.8/js/jquery.dataTables.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", function(){
  document.querySelectorAll("table.report-table").forEach(function(tbl){
    $(tbl).DataTable({pageLength: 25, deferRender: true, scrollX: true});
  });
});
</script>
"""

def _table_html(df: pd.DataFrame, table_id: str) -> str:
    return df.to_html(
        escape=False, index=False, table_id=table_id,
        classes="report-table display nowrap", border=0
    )

def _fig_html(fig) -> str:
    # Inline Plotly JS so the file is fully self-contained and works offline
    return pio.to_html(fig, include_plotlyjs="inline", full_html=False,
                       config={"displaylogo": False})

def build_html_report(
    title: str,
    sections: list[dict],  # [{"heading":"...", "figs":[...], "tables":[("Label", df)], "notes":"..."}]
    output_path: str | Path
) -> Path:
    parts = [f"<!doctype html><meta charset='utf-8'><title>{escape(title)}</title>",
             f"<style>{CSS}</style>", DT_HEAD, f"<h1>{escape(title)}</h1>"]

    for sec in sections:
        parts.append(f"<h2>{escape(sec['heading'])}</h2>")
        if sec.get("notes"):
            parts.append(f"<div class='card'><em>{escape(sec['notes'])}</em></div>")
        for fig in sec.get("figs", []):
            parts.append(f"<div class='card'>{_fig_html(fig)}</div>")
        for label, df in sec.get("tables", []):
            parts.append(f"<div class='card'><strong>{escape(label)}</strong>{_table_html(df, table_id=label)}</div>")

    parts.append("<footer>Generated by Streamlit exporter ‚Ä¢ Works offline ‚Ä¢ Send as attachment or host on a static site</footer>")
    html = "\n".join(parts)

    output_path = Path(output_path)
    output_path.write_text(html, encoding="utf-8")
    return output_path

How to use it inside Streamlit:

# in your Streamlit app
import streamlit as st
import pandas as pd
import plotly.express as px
from utils.report_export import build_html_report

# Example content
df = pd.DataFrame({"Sector":["Tech","Banks","Materials"], "Return":[0.8, -0.4, 0.2]})
fig = px.bar(df, x="Sector", y="Return", title="Sector Returns")

sections = [
    {"heading":"Overview", "figs":[fig], "tables":[("Summary Table", df)], "notes":"Interactive bar chart and sortable table."}
]

if st.button("üìÑ Export interactive HTML"):
    path = build_html_report(
        title="Client Report ‚Äì ACME Portfolio",
        sections=sections,
        output_path="client_report.html"
    )
    with open(path, "rb") as f:
        st.download_button("Download HTML report", f, file_name=path.name, mime="text/html")

Tips

If email filters block JS/CSS CDNs, keep include_plotlyjs="inline" (already done) and replace the DataTables CDN with local, inlined JS/CSS (or zip the HTML + assets).

Large files: Plotly inline JS adds ~3‚Äì4 MB. For smaller files, switch to include_plotlyjs='cdn' and host the HTML (send a link).

If you use Ag-Grid in Streamlit, export tables to CSV and include them as DataTables in the report for similar UX.



---

Option B ‚Äî ‚ÄúStreamlit in the browser‚Äù with stlite (Pyodide)

If you truly need Streamlit-style widgets & callbacks without a server, stlite runs a subset of Streamlit in the browser via WebAssembly (Pyodide). You package a small HTML that loads your .py script.

Pros: Feels like Streamlit, still a single HTML.
Cons: Large file (~10s of MB), slower startup, some packages and network calls won‚Äôt work.

Minimal stlite HTML skeleton:

<!doctype html>
<meta charset="utf-8" />
<title>Client Report</title>
<script src="https://whitphx.github.io/stlite/v0.69.0/stlite.js"></script>
<div id="app"></div>
<script type="text/python">
import streamlit as st
import pandas as pd
st.set_page_config(page_title="Client Report", layout="wide")
st.title("Client Report ‚Äì Works Offline")
df = pd.DataFrame({"A":[1,2,3], "B":[4,5,6]})
st.dataframe(df)
st.slider("Try me", 0, 10, 5)
</script>
<script>
stlite.mount(document.getElementById("app"), { requirements: ["pandas==2.2.2"] })
</script>

Package that single file and email it. (You may need to trim dependencies and avoid anything that needs native libs.)


---

Option C ‚Äî Save with Panel/Bokeh (if you can wrap your views)

If your charts are Plotly/Bokeh-based, Panel can save a dashboard to a standalone HTML (panel.save("report.html")) with working interactivity (including widgets) and no server. This requires a light refactor around your existing figures/tables, but the result is very email-friendly.


---

What I‚Äôd do for you

Keep the Streamlit app as is.

Add the Option A exporter for reliable, offline, email-safe HTML with Plotly + DataTables.

For clients who want the exact Streamlit feel offline, provide an Option B (stlite) build as an alternative download (with a disclaimer about size/startup time).


If you want, share a small snippet of your app (one chart + one table) and I‚Äôll wire in the exporter so you can drop it straight into your code.

